{"version":3,"sources":["components/Form/Form.module.css","components/Filter/Filter.module.css","redux/phonebook/phonebook-operation.js","redux/phonebook/phonebook-selector.js","components/Form/Form.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Title/Title.js","components/views/ContactsView.js"],"names":["module","exports","name","number","dispatch","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","e","addContactError","message","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","console","log","a","fetchContactRequest","get","fetchContactSuccess","fetchContactError","getFilter","state","phonebook","filter","getAllContacts","contacts","getPhonebookFilter","createSelector","filterValues","toLowerCase","includes","Form","useState","newName","setNewName","setNumber","useDispatch","useSelector","phonebookSelector","useEffect","phonebookOperations","InputValues","currentTarget","value","onSubmit","contactList","some","checkName","toast","error","resetInputValues","idName","shortid","generate","idNumber","className","s","form","preventDefault","htmlFor","labelName","id","type","onChange","autoComplete","labelNumber","pattern","btnForm","ContactForm","TransitionGroup","component","classNames","table","map","CSSTransition","timeout","unmountOnExit","btnList","onClick","Filter","onSearch","useCallback","phonebookAction","target","containerSearch","labelSearch","inputSearch","Title","ContactsView"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,YAAc,0BAA0B,QAAU,wB,oBCAlID,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,YAAc,4BAA4B,YAAc,8B,6IC4C7G,EArBI,SAACC,EAAMC,GAAP,OAAkB,SAACC,GACpC,IAAMC,EAAU,CAAEH,OAAMC,UAExBC,EAASE,eAETC,IACGC,KAAK,YAAaH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASO,YAAkBD,OAC9CE,OAAM,SAACC,GAAD,OAAOT,EAASU,YAAgBD,EAAEE,eAa9B,EAVO,SAACC,GAAD,OAAe,SAACZ,GACpCA,EAASa,eAETV,IACGW,OADH,oBACuBF,IACpBP,MAAK,kBAAML,EAASe,YAAqBH,OACzCJ,OAAM,SAACC,GAAD,OAAOT,EAASgB,YAAmBP,EAAEE,aAC9CM,QAAQC,IAAIN,KAGC,EAhCO,yDAAM,WAAOZ,GAAP,iBAAAmB,EAAA,6DAC1BnB,EAASoB,eADiB,kBAIDjB,IAAMkB,IAAI,aAJT,gBAIhBf,EAJgB,EAIhBA,KACRN,EAASsB,YAAoBhB,IALL,gDAOxBN,EAASuB,YAAkB,KAAEZ,UAPL,yDAAN,uD,QCXhBa,EAAY,SAACC,GAAD,OAAWA,EAAMC,UAAUC,QACvCC,EAAiB,SAACH,GAAD,OAAWA,EAAMC,UAAUG,UAanC,GACbL,YACAI,iBACAE,mBAdyBC,YACzB,CAACH,EAAgBJ,IACjB,SAACK,EAAUF,GACT,IAAMK,EAAeL,EAAOM,cAE5B,OAAOJ,EAASF,QAAO,gBAAG7B,EAAH,EAAGA,KAAH,cACrBA,QADqB,IACrBA,OADqB,EACrBA,EAAMmC,cAAcC,SAASF,U,yBCHpB,SAASG,IAAQ,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,OAEDF,mBAAS,IAFR,mBAEtBrC,EAFsB,KAEdwC,EAFc,KAIvBvC,EAAWwC,cAEXf,EAAQgB,YAAYC,EAAkBd,gBAE5Ce,qBAAU,WACR3C,EAAS4C,OACR,CAAC5C,IAEJ,IAAM6C,EAAc,SAACpC,GAAO,IAAD,EACDA,EAAEqC,cAAlBhD,EADiB,EACjBA,KAAMiD,EADW,EACXA,MAEd,OAAQjD,GACN,IAAK,OACHwC,EAAWS,GACX,MACF,IAAK,SACHR,EAAUQ,GACV,MACF,QACE,SAsBAC,EAAW,SAACX,EAAStC,EAAQkD,GACjC,GALgB,SAACA,EAAaZ,GAC9B,cAAOY,QAAP,IAAOA,OAAP,EAAOA,EAAaC,MAAK,qBAAGpD,OAAoBuC,KAI5Cc,CAAUF,EAAaZ,GACzB,OAAOe,IAAMC,MAAM,yHAErBrD,EAAS4C,EAA+BP,EAAStC,KAG7CuD,EAAmB,WACvBhB,EAAW,IACXC,EAAU,KAGNgB,EAASC,IAAQC,WACjBC,EAAWF,IAAQC,WAEzB,OACE,uBAAME,UAAWC,IAAEC,KAAMb,SAlCR,SAACvC,GAKlB,GAJAA,EAAEqD,iBAIgB,KAFA/D,EAGhB,OAAOqD,IAAMC,MAAM,6EAGrBL,EAASX,EAAStC,EAAQ0B,GAE1B6B,KAuBA,UACE,uBAAOS,QAASR,EAAQI,UAAWC,IAAEI,UAArC,gCAGA,uBACEC,GAAIV,EACJW,KAAK,OACLpE,KAAK,OACLiD,MAAOV,EACP8B,SAAUtB,EACVuB,aAAa,QAEf,uBAAOL,QAASL,EAAUC,UAAWC,IAAES,YAAvC,4CAGA,uBACEJ,GAAIP,EACJQ,KAAK,MACLI,QAAQ,YACRxE,KAAK,SACLiD,MAAOhD,EACPoE,SAAUtB,EACVuB,aAAa,QAEf,wBAAQT,UAAWC,IAAEW,QAASL,KAAK,UAAnC,4G,uCCvFS,SAASM,IACtB,IAAMxE,EAAWwC,cACXS,EAAcR,YAAYC,EAAkBZ,oBAElD,OACE,cAAC2C,EAAA,EAAD,CAAiBC,UAAU,KAAKC,WAAYf,IAAEgB,MAA9C,SACG3B,EAAY4B,KAAI,YAA2B,IAAxBZ,EAAuB,EAAvBA,GAAInE,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC5B,OACE,cAAC+E,EAAA,EAAD,CAAwBC,QAAS,IAAKJ,WAAYf,IAAGoB,eAAa,EAAlE,SACE,+BACGlF,EADH,KACWC,EACT,wBACE4D,UAAWC,IAAEqB,QACbf,KAAK,SACLgB,QAAS,kBAAMlF,EAAS4C,EAAkCqB,KAH5D,4DAHgBA,Q,sBCPf,SAASkB,IACtB,IAAMlB,EAAKT,IAAQC,WAEbzD,EAAWwC,cACXO,EAAQN,YAAYC,EAAkBlB,WAEtC4D,EAAWC,uBACf,SAAC5E,GACCT,EAASsF,IAA6B7E,EAAE8E,OAAOxC,UAEjD,CAAC/C,IAGH,OACE,sBAAK2D,UAAWC,IAAE4B,gBAAlB,UACE,oBAAI7B,UAAWC,IAAEX,YAAjB,8DACA,uBAAOU,UAAWC,IAAE6B,YAAa1B,QAASE,EAA1C,yIAGA,uBACEC,KAAK,OACLpE,KAAK,SACLiD,MAAOA,EACPoB,SAAUiB,EACVnB,GAAIA,EACJN,UAAWC,IAAE8B,iBCrBNC,MARf,WACE,OACE,8BACE,oBAAIhC,UAAWC,IAAEC,KAAjB,4GCYS+B,UAXf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAACzD,EAAD,IACA,cAACgD,EAAD,IACA,cAACX,EAAD","file":"static/js/4.30d50ce3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3kKTq\",\"labelName\":\"Form_labelName__bfEZ-\",\"labelNumber\":\"Form_labelNumber__1rvoj\",\"btnForm\":\"Form_btnForm__2f8gC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerSearch\":\"Filter_containerSearch__3BoU7\",\"labelSearch\":\"Filter_labelSearch__2HHCI\",\"inputSearch\":\"Filter_inputSearch__2KGmH\"};","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./phonebook-action\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (e) {\r\n    dispatch(fetchContactError(e.message));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((e) => dispatch(addContactError(e.message)));\r\n};\r\n\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((e) => dispatch(deleteContactError(e.message)));\r\n  console.log(contactId);\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getFilter = (state) => state.phonebook.filter;\r\nconst getAllContacts = (state) => state.phonebook.contacts;\r\n\r\nconst getPhonebookFilter = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const filterValues = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name?.toLowerCase().includes(filterValues)\r\n    );\r\n  }\r\n);\r\n\r\nexport default {\r\n  getFilter,\r\n  getAllContacts,\r\n  getPhonebookFilter,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport phonebookOperations from \"../../redux/phonebook/phonebook-operation\";\r\nimport phonebookSelector from \"../../redux/phonebook/phonebook-selector\";\r\nimport s from \"../Form/Form.module.css\";\r\n\r\nexport default function Form() {\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector(phonebookSelector.getAllContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(phonebookOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const InputValues = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setNewName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const addContact = (e) => {\r\n    e.preventDefault();\r\n\r\n    const checNumer = number;\r\n\r\n    if (checNumer === \"\") {\r\n      return toast.error(\"Введите номер\");\r\n    }\r\n\r\n    onSubmit(newName, number, state);\r\n\r\n    resetInputValues();\r\n  };\r\n\r\n  const checkName = (contactList, newName) => {\r\n    return contactList?.some(({ name }) => name === newName);\r\n  };\r\n\r\n  const onSubmit = (newName, number, contactList) => {\r\n    if (checkName(contactList, newName)) {\r\n      return toast.error(\"Это имя уже существует\");\r\n    }\r\n    dispatch(phonebookOperations.addContact(newName, number));\r\n  };\r\n\r\n  const resetInputValues = () => {\r\n    setNewName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const idName = shortid.generate();\r\n  const idNumber = shortid.generate();\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={addContact}>\r\n      <label htmlFor={idName} className={s.labelName}>\r\n        Имя\r\n      </label>\r\n      <input\r\n        id={idName}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={newName}\r\n        onChange={InputValues}\r\n        autoComplete=\"off\"\r\n      ></input>\r\n      <label htmlFor={idNumber} className={s.labelNumber}>\r\n        Номер\r\n      </label>\r\n      <input\r\n        id={idNumber}\r\n        type=\"tel\"\r\n        pattern=\"^[ 0-9]+$\"\r\n        name=\"number\"\r\n        value={number}\r\n        onChange={InputValues}\r\n        autoComplete=\"off\"\r\n      ></input>\r\n      <button className={s.btnForm} type=\"submite\">\r\n        Добавить контакт\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// class Form extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.props.fetchContacts();\r\n//   }\r\n\r\n// InputValues = (e) => {\r\n//   const { name, value } = e.currentTarget;\r\n\r\n//   switch (name) {\r\n//     case \"name\":\r\n//       this.setState({ name: value });\r\n//       break;\r\n//     case \"number\":\r\n//       this.setState({ number: value });\r\n//       break;\r\n//     default:\r\n//       return;\r\n//   }\r\n// };\r\n\r\n//   addContact = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const checNumer = this.state.number;\r\n\r\n//     if (checNumer === \"\") {\r\n//       return toast.error(\"Введите номер\");\r\n//     }\r\n\r\n//     this.props.onSubmit({\r\n//       name: this.state.name,\r\n//       number: this.state.number,\r\n//     });\r\n//     this.resetInputValues();\r\n//   };\r\n\r\n//   const checkName = (contactList, newName) => {\r\n//   return contactList?.some(({ name }) => name === newName);\r\n// };\r\n\r\n// resetInputValues = () => {\r\n//   this.setState({ name: \"\", number: \"\" });\r\n// };\r\n\r\n//   render() {\r\n// const idName = shortid.generate();\r\n// const idNumber = shortid.generate();\r\n\r\n// return (\r\n//   <form className={s.form} onSubmit={this.addContact}>\r\n//     <label htmlFor={idName} className={s.labelName}>\r\n//       Имя\r\n//     </label>\r\n//     <input\r\n//       id={idName}\r\n//       type=\"text\"\r\n//       name=\"name\"\r\n//       value={this.state.name}\r\n//       onChange={this.InputValues}\r\n//       autoComplete=\"off\"\r\n//     ></input>\r\n//     <label htmlFor={idNumber} className={s.labelNumber}>\r\n//       Номер\r\n//     </label>\r\n//     <input\r\n//       id={idNumber}\r\n//       type=\"tel\"\r\n//       pattern=\"^[ 0-9]+$\"\r\n//       name=\"number\"\r\n//       value={this.state.number}\r\n//       onChange={this.InputValues}\r\n//       autoComplete=\"off\"\r\n//     ></input>\r\n//     <button className={s.btnForm} type=\"submite\">\r\n//       Добавить контакт\r\n//     </button>\r\n//   </form>\r\n// );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contactList: state.phonebook.contacts,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\r\n//   onSubmit: (newName, number, contactList) => {\r\n//   if (checkName(contactList, newName)) {\r\n//     return toast.error(\"Это имя уже существует\");\r\n//   }\r\n//   dispatch(phonebookOperations.addContact(newName, number));\r\n// },\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React, { useCallback } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { phonebookOperations, phonebookSelector } from \"../../redux/phonebook\";\r\nimport s from \"../ContactForm/ContactForm.module.css\";\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const contactList = useSelector(phonebookSelector.getPhonebookFilter);\r\n\r\n  return (\r\n    <TransitionGroup component=\"ul\" classNames={s.table}>\r\n      {contactList.map(({ id, name, number }) => {\r\n        return (\r\n          <CSSTransition key={id} timeout={250} classNames={s} unmountOnExit>\r\n            <li>\r\n              {name}: {number}\r\n              <button\r\n                className={s.btnList}\r\n                type=\"button\"\r\n                onClick={() => dispatch(phonebookOperations.deleteContact(id))}\r\n              >\r\n                Удалить\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        );\r\n      })}\r\n    </TransitionGroup>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contactList: phonebookSelector.getPhonebookFilter(state),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDeleted: (id) => dispatch(phonebookOperations.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(СontactForm);\r\n\r\n// function СontactForm({ contactList, onDeleted }) {\r\n// return (\r\n//   <TransitionGroup component=\"ul\" classNames={s.table}>\r\n//     {contactList.map(({ id, name, number }) => {\r\n//       return (\r\n//         <CSSTransition key={id} timeout={250} classNames={s} unmountOnExit>\r\n//           <li>\r\n//             {name}: {number}\r\n//             <button\r\n//               className={s.btnList}\r\n//               type=\"button\"\r\n//               onClick={() => onDeleted(id)}\r\n//             >\r\n//               Удалить\r\n//             </button>\r\n//           </li>\r\n//         </CSSTransition>\r\n//       );\r\n//     })}\r\n//   </TransitionGroup>\r\n// );\r\n// }\r\n","import React, { useCallback } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as phonebookAction from \"../../redux/phonebook/phonebook-action\";\r\nimport phonebookSelector from \"../../redux/phonebook/phonebook-selector\";\r\nimport s from \"../Filter/Filter.module.css\";\r\n\r\nexport default function Filter() {\r\n  const id = shortid.generate();\r\n\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(phonebookSelector.getFilter);\r\n\r\n  const onSearch = useCallback(\r\n    (e) => {\r\n      dispatch(phonebookAction.changeFilter(e.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <div className={s.containerSearch}>\r\n      <h2 className={s.contactList}>Контакты</h2>\r\n      <label className={s.labelSearch} htmlFor={id}>\r\n        Поиск контакта по имени\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onSearch}\r\n        id={id}\r\n        className={s.inputSearch}\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport s from \"../ContactForm/ContactForm.module.css\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <div>\r\n      <h1 className={s.form}>Телефонная книга</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nimport Form from \"../Form/Form\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport Title from \"../Title/Title\";\r\n\r\nfunction ContactsView() {\r\n  return (\r\n    <>\r\n      <Title />\r\n      <Form />\r\n      <Filter />\r\n      <ContactForm />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}