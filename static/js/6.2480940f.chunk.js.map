{"version":3,"sources":["components/views/RegistrView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["RegistrView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","resetLogin","className","s","conteiner","onSubmit","e","preventDefault","authOperations","register","autoComplete","type","onChange","label","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"yPAKe,SAASA,IACtB,IAAMC,EAAWC,cADmB,EAEZC,mBAAS,IAFG,mBAE7BC,EAF6B,KAEvBC,EAFuB,OAGVF,mBAAS,IAHC,mBAG7BG,EAH6B,KAGtBC,EAHsB,OAIJJ,mBAAS,IAJL,mBAI7BK,EAJ6B,KAInBC,EAJmB,KAM9BC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAQO,GACjB,IAAK,QACH,OAAOL,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GAErB,QACE,SAYAC,EAAa,WACjBR,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGd,OACE,sBAAKK,UAAWC,IAAEC,UAAlB,UACE,qGACA,uBAAMC,SAjBW,SAACC,GACpBA,EAAEC,iBAEFlB,EAASmB,IAAeC,SAAS,CAAEjB,OAAME,QAAOE,cAEhDK,KAYgCS,aAAa,MAA3C,UACE,yCAEE,uBACEV,MAAOR,EACPA,KAAK,OACLmB,KAAK,OACLC,SAAUd,EACVI,UAAWC,IAAEU,WAGjB,0CAEE,uBACEb,MAAON,EACPF,KAAK,QACLmB,KAAK,QACLC,SAAUd,EACVI,UAAWC,IAAEU,WAGjB,6CAEE,uBACEb,MAAOJ,EACPJ,KAAK,WACLmB,KAAK,WACLC,SAAUd,EACVI,UAAWC,IAAEU,WAGjB,wBAAQF,KAAK,SAAb,kI,8ECrEO,SAASG,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG3B,QAETgB,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF","file":"static/js/6.2480940f.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authOperations } from \"../../redux/auth\";\r\nimport s from \"../AppBar/Phonebook.module.css\";\r\n\r\nexport default function RegistrView() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"name\":\r\n        return setName(value);\r\n      case \"email\":\r\n        return setEmail(value);\r\n      case \"password\":\r\n        return setPassword(value);\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(authOperations.register({ name, email, password }));\r\n\r\n    resetLogin();\r\n  };\r\n\r\n  const resetLogin = () => {\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={s.conteiner}>\r\n      <h1> Регистрация</h1>\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <label>\r\n          name\r\n          <input\r\n            value={name}\r\n            name=\"name\"\r\n            type=\"name\"\r\n            onChange={handleChange}\r\n            className={s.label}\r\n          />\r\n        </label>\r\n        <label>\r\n          Email\r\n          <input\r\n            value={email}\r\n            name=\"email\"\r\n            type=\"email\"\r\n            onChange={handleChange}\r\n            className={s.label}\r\n          />\r\n        </label>\r\n        <label>\r\n          Password\r\n          <input\r\n            value={password}\r\n            name=\"password\"\r\n            type=\"password\"\r\n            onChange={handleChange}\r\n            className={s.label}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Зарегистрироваться</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// class RegistrView extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     email: \"\",\r\n//     password: \"\",\r\n//   };\r\n\r\n//   handleChange = ({ target: { name, value } }) => {\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onRegister(this.state);\r\n\r\n//     this.setState({ name: \"\", email: \"\", password: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, email, password } = this.state;\r\n//     return (\r\n//       <div className={s.conteiner}>\r\n//         <h1> Регистрация</h1>\r\n//         <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n//           <label>\r\n//             name\r\n//             <input\r\n//               value={name}\r\n//               name=\"name\"\r\n//               type=\"name\"\r\n//               onChange={this.handleChange}\r\n//               className={s.label}\r\n//             />\r\n//           </label>\r\n//           <label>\r\n//             Email\r\n//             <input\r\n//               value={email}\r\n//               name=\"email\"\r\n//               type=\"email\"\r\n//               onChange={this.handleChange}\r\n//               className={s.label}\r\n//             />\r\n//           </label>\r\n//           <label>\r\n//             Password\r\n//             <input\r\n//               value={password}\r\n//               name=\"password\"\r\n//               type=\"password\"\r\n//               onChange={this.handleChange}\r\n//               className={s.label}\r\n//             />\r\n//           </label>\r\n//           <button type=\"submit\">Зарегистрироваться</button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onRegister: authOperations.register,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(RegistrView);\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}