{"version":3,"sources":["components/views/LoginView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["LoginView","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","value","resetLogin","className","s","conteiner","onSubmit","e","preventDefault","authOperations","login","autoComplete","labelName","type","onChange","label","buttonLogin","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"yPAKe,SAASA,IACtB,IAAMC,EAAWC,cADiB,EAERC,mBAAS,IAFD,mBAE3BC,EAF2B,KAEpBC,EAFoB,OAGFF,mBAAS,IAHP,mBAG3BG,EAH2B,KAGjBC,EAHiB,KAK5BC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOL,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GAErB,QACE,SAYAC,EAAa,WACjBP,EAAS,IACTE,EAAY,KAGd,OACE,sBAAKM,UAAWC,IAAEC,UAAlB,UACE,iEACA,uBAAMC,SAhBW,SAACC,GACpBA,EAAEC,iBAEFjB,EAASkB,IAAeC,MAAM,CAAEhB,QAAOE,cAEvCM,KAWgCS,aAAa,MAA3C,UACE,wBAAOR,UAAWC,IAAEQ,UAApB,kBAEE,uBACEC,KAAK,QACLb,KAAK,QACLC,MAAOP,EACPoB,SAAUhB,EACVK,UAAWC,IAAEW,WAGjB,wBAAOZ,UAAWC,IAAEQ,UAApB,qBAEE,uBACEC,KAAK,WACLb,KAAK,WACLC,MAAOL,EACPkB,SAAUhB,EACVK,UAAWC,IAAEW,WAGjB,wBAAQF,KAAK,SAASV,UAAWC,IAAEY,YAAnC,oD,8ECvDO,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG7B,QAETkB,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF","file":"static/js/5.5ce0a162.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authOperations } from \"../../redux/auth\";\r\nimport s from \"../AppBar/Phonebook.module.css\";\r\n\r\nexport default function LoginView() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"email\":\r\n        return setEmail(value);\r\n      case \"password\":\r\n        return setPassword(value);\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(authOperations.login({ email, password }));\r\n\r\n    resetLogin();\r\n  };\r\n\r\n  const resetLogin = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={s.conteiner}>\r\n      <h1>Логин </h1>\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <label className={s.labelName}>\r\n          Email\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n            className={s.label}\r\n          />\r\n        </label>\r\n        <label className={s.labelName}>\r\n          Password\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n            className={s.label}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.buttonLogin}>\r\n          Войти\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// class LoginView extends Component {\r\n//   state = {\r\n//     email: \"\",\r\n//     password: \"\",\r\n//   };\r\n\r\n// handleChange = ({ target: { name, value } }) => {\r\n//   this.setState({ [name]: value });\r\n// };\r\n\r\n// handleSubmit = (e) => {\r\n//   e.preventDefault();\r\n\r\n//   this.props.onLogin(this.state);\r\n\r\n//   this.setState({ name: \"\", email: \"\", password: \"\" });\r\n// };\r\n\r\n//   render() {\r\n// const { email, password } = this.state;\r\n\r\n// return (\r\n//   <div className={s.conteiner}>\r\n//     <h1>Логин </h1>\r\n//     <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n//       <label className={s.labelName}>\r\n//         Email\r\n//         <input\r\n//           type=\"email\"\r\n//           name=\"email\"\r\n//           value={email}\r\n//           onChange={this.handleChange}\r\n//           className={s.label}\r\n//         />\r\n//       </label>\r\n//       <label className={s.labelName}>\r\n//         Password\r\n//         <input\r\n//           type=\"password\"\r\n//           name=\"password\"\r\n//           value={password}\r\n//           onChange={this.handleChange}\r\n//           className={s.label}\r\n//         />\r\n//       </label>\r\n//       <button type=\"submit\" className={s.buttonLogin}>\r\n//         Войти\r\n//       </button>\r\n//     </form>\r\n//   </div>\r\n// );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onLogin: authOperations.login,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(LoginView);\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}